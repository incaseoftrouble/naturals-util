plugins {
    // https://plugins.gradle.org/plugin/io.codearte.nexus-staging
    id 'io.codearte.nexus-staging' version '0.21.2'
}

group 'de.tum.in'
version '0.15.1'

apply plugin: 'java'

apply plugin: 'pmd'
apply plugin: 'checkstyle'

apply plugin: 'idea'

project.sourceCompatibility = JavaVersion.VERSION_1_8
project.targetCompatibility = JavaVersion.VERSION_1_8

def defaultEncoding = 'UTF-8'
tasks.withType(JavaCompile) { options.encoding = defaultEncoding }
tasks.withType(Javadoc) { options.encoding = defaultEncoding }

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'

    // https://mvnrepository.com/artifact/it.unimi.dsi/fastutil
    implementation group: 'it.unimi.dsi', name: 'fastutil', version: '8.3.1'
    // https://mvnrepository.com/artifact/com.zaxxer/SparseBitSet
    implementation group: 'com.zaxxer', name: 'SparseBitSet', version: '1.2'
    // https://mvnrepository.com/artifact/org.roaringbitmap/RoaringBitmap
    implementation group: 'org.roaringbitmap', name: 'RoaringBitmap', version: '0.8.20'

    // https://mvnrepository.com/artifact/org.hamcrest/hamcrest
    testImplementation 'org.hamcrest:hamcrest:2.2'
    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.6.2"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.6.2"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.6.2"
}

test {
    useJUnitPlatform()

    maxHeapSize = "16g"
}

// PMD
// https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.Pmd.html

pmd {
    toolVersion = "6.25.0" // https://pmd.github.io/
    reportsDir = file("$project.buildDir/reports/pmd")
    ruleSetFiles = files("$project.rootDir/config/pmd-rules.xml")
    ruleSets = [] // We specify all rules in rules.xml
    consoleOutput = false
    ignoreFailures = false
}
//noinspection GroovyAssignabilityCheck
tasks.withType(Pmd) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

// Checkstyle
// https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.Checkstyle.html

checkstyle {
    toolVersion = "8.34" // http://checkstyle.sourceforge.net/releasenotes.html
    configFile = file("$project.rootDir/config/checkstyle.xml")
    ignoreFailures = false
    maxWarnings = 0
    showViolations = false // Don't litter console
    checkstyleMain {
        configProperties = ['suppression-file':
                                    "$project.rootDir/config/checkstyle-main-suppression.xml"]
    }
    checkstyleTest {
        configProperties = ['suppression-file':
                                    "$project.rootDir/config/checkstyle-test-suppression.xml"]
    }
}

// Deployment - run with -Prelease clean uploadArchives closeAndReleaseRepository
if (project.hasProperty('release')) {
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'io.codearte.nexus-staging'
    apply from: 'gradle/publish.gradle'
}

// If a user file is present, include it.
if (file('../user.gradle').exists()) {
    apply from: '../user.gradle'
}
